Column(
          children: [
            const SizedBox(height: 10),
            Padding(
              padding: const EdgeInsets.only(
                  top: 8.0, bottom: 8.0, left: 35.0, right: 35.0),
              child: TextFormField(
                controller: _wasteController,
                decoration: const InputDecoration(
                  labelText: 'Waste Company Username',
                  prefixIcon: Icon(Icons.person),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(25),
                    ),
                  ),
                ),
                validator: (value) {
                  if (value?.isEmpty ?? true) {
                    return 'Please enter valid Username';
                  }
                  return null;
                },
              ),
            ),
            const SizedBox(height: 10),
            Padding(
              padding: const EdgeInsets.only(
                  top: 8.0, bottom: 8.0, left: 35.0, right: 35.0),
              child: TextFormField(
                controller: _mailController,
                decoration: const InputDecoration(
                  labelText: 'E-mail',
                  prefixIcon: Icon(Icons.phone),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(25),
                    ),
                  ),
                ),
                validator: (value) {
                  if (value?.isEmpty ?? true) {
                    return 'Please enter valid E-mail';
                  }
                  return null;
                },
              ),
            ),
            const SizedBox(height: 10),
            Padding(
              padding: const EdgeInsets.only(
                  top: 8.0, bottom: 8.0, left: 35.0, right: 35.0),
              child: TextFormField(
                controller: _contactController,
                decoration: const InputDecoration(
                  labelText: 'Contact',
                  prefixIcon: Icon(Icons.phone),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(25),
                    ),
                  ),
                ),
                validator: (value) {
                  if (value?.isEmpty ?? true) {
                    return 'Please enter valid Contact';
                  }
                  return null;
                },
              ),
            ),
            const SizedBox(height: 10),
            Padding(
              padding: const EdgeInsets.only(
                  top: 8.0, bottom: 8.0, left: 35.0, right: 35.0),
              child: TextFormField(
                controller: _passwordController,
                obscureText: passwordVisible,
                decoration: InputDecoration(
                    labelText: 'Password',
                    prefixIcon: const Icon(Icons.lock),
                    border: const OutlineInputBorder(
                      borderRadius: BorderRadius.all(
                        Radius.circular(25),
                      ),
                    ),
                    suffixIcon: IconButton(
                      onPressed: () {
                        setState(
                          () {
                            passwordVisible = !passwordVisible;
                          },
                        );
                      },
                      icon: Icon(passwordVisible
                          ? Icons.visibility
                          : Icons.visibility_off),
                    )),
                validator: (value) {
                  if (value?.isEmpty ?? true) {
                    return 'Please enter valid password';
                  }
                  return null;
                },
              ),
            ),
            const SizedBox(height: 10),
            GestureDetector(
              onTap: () {
                // Your action here
                showModalBottomSheet(
                  context: context,
                  builder: (context) {
                    return DraggableScrollableSheet(
                      initialChildSize:
                          MediaQuery.of(context).size.height * 0.8,
                      minChildSize: MediaQuery.of(context).size.height * 0.5,
                      maxChildSize: MediaQuery.of(context).size.height * 1.0,
                      builder: (context, scrollCOntroller) {
                        return SingleChildScrollView(
                          child: Column(
                            children: [
                              const Text(
                                "Terms and Conditions",
                                style: TextStyle(
                                    fontSize: 24, fontWeight: FontWeight.bold),
                              ),
                              const SizedBox(
                                height: 5,
                              ),
                              const Text(
                                "1. By using this app, you agree to comply with all applicable laws and regulations regarding waste management.",
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '2. The information provided in the app is for general informational purposes only and should not be considered professional advice.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '3. We are not responsible for any damages or losses incurred as a result of using the app or relying on the information provided.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '4. The app may contain links to third-party websites or services. We have no control over the content and availability of these sites and services.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '5. Your use of the app may be subject to additional terms and conditions specific to certain features or services.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '6. We reserve the right to modify or terminate the app at any time without prior notice.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '7. Any personal information you provide through the app will be handled in accordance with our privacy policy.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '8. You are solely responsible for the accuracy and legality of any content you submit through the app.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                "9. We may collect anonymous usage data to improve the app's functionality and user experience.",
                                style: TextStyle(fontSize: 18),
                              ),
                              const Text(
                                '10. By using the app, you agree to indemnify and hold us harmless from any claims, damages, or liabilities arising out of your use of the app.',
                                style: TextStyle(fontSize: 18),
                              ),
                              const SizedBox(
                                height: 5,
                              ),
                              Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceEvenly,
                                children: [
                                  ElevatedButton(
                                    style: ButtonStyle(
                                        backgroundColor:
                                            WidgetStateProperty.all<Color>(
                                      const Color.fromARGB(255, 103, 196, 107),
                                    )),
                                    onPressed: () {
                                      // Decline action
                                      Navigator.pop(context);
                                    },
                                    child: const Text("Decline",
                                        style: TextStyle(color: Colors.white)),
                                  ),
                                  ElevatedButton(
                                    style: ButtonStyle(
                                        backgroundColor:
                                            WidgetStateProperty.all<Color>(
                                      const Color.fromARGB(255, 103, 196, 107),
                                    )),
                                    onPressed: () {
                                      // Accept action
                                      Navigator.pop(context);
                                      // Add your logic here to handle the acceptance of terms and conditions
                                    },
                                    child: const Text("Accept",
                                        style: TextStyle(color: Colors.white)),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        );
                      },
                    );
                  },
                );
              },
              child: const Text(
                "I accept the terms and conditions",
                style: TextStyle(
                  color: Color.fromARGB(255, 103, 196, 107),
                ),
              ),
            ),
            const SizedBox(height: 15),
            ElevatedButton(
              onPressed: () {
                // final wuser = WasteModel(
                //   name: _wasteController.text,
                //   password: _passwordController.text,
                //   email: _mailController.text,
                //   contact: _contactController.text,
                // );
                // WasteRepository.instance.createUser(wuser);
                if (validateAndSave()) {
                  _signup();
                }
              },
              style: ButtonStyle(
                backgroundColor: WidgetStateProperty.all<Color>(
                  const Color(0Xff0C2925),
                ),
              ),
              child:
                  const Text('Sign up', style: TextStyle(color: Colors.white)),
            ),
            const SizedBox(height: 20),
          
          ],
        ),